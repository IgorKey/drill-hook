package=com.epam.drill.hook.gen
headers=funchook.h
linkerOpts.osx=-L/Users/igor_kuzminykh/untitled5/lib/macosX64 -lfunchook
---
/* -*- indent-tabs-mode: nil -*-
 */
#if defined(__linux__) && !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif
#ifdef WIN32
#define _CRT_SECURE_NO_WARNINGS
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#ifdef WIN32
#include <windows.h>
#include <io.h>
#define mode_t int
#define ssize_t int
#define open _open
/* cast the third argument of _read to suppress warning C4267 */
#define read(fd, buf, count) _read((fd), (buf), (unsigned int)(count))
/* cast the second argument of fgets to suppress warning C4267 */
#define fgets(s, size, fp) fgets((s), (int)(size), (fp))
#define close _close
#else

#include <unistd.h>
#include <dlfcn.h>

#endif

#include <funchook.h>

#ifdef WIN32
#define DLLEXPORT __declspec(dllexport)
#else
#define DLLEXPORT
#endif

#ifdef __GNUC__
#define NOINLINE __attribute__((noinline))
#endif
#ifdef _MSC_VER
#define NOINLINE __declspec(noinline)
#endif

#if defined(__APPLE__) && defined(__clang_major__) && __clang_major__ >= 11
#define SKIP_TESTS_CHANGING_EXE
#endif

typedef int (*int_func_t)(void);


#if defined(WIN32) || defined(__APPLE__)

extern void set_int_val(int val);

#else
#define set_int_val(val) do {} while(0)
#endif

#ifdef _MSC_VER
int reset_retval()
{
    return 0;
}
#endif

#if defined(WIN32)
__declspec(dllexport) int int_val = 0xbaceba11;
#else
int int_val = 0xbaceba11;
#endif

static funchook_t *funchook;

void create_funchook() {
    funchook = funchook_create();
}


static ssize_t (*read_func)(int, void *, size_t) = read;

static void read_hook(ssize_t (*hookFunc)(int, void *, size_t)) {
    funchook_prepare(funchook, (void **) &read_func, hookFunc);
}

static ssize_t (*write_func)(int, const void *, size_t) = write;

static void write_hook(ssize_t (*pFunction)(int, const void *, size_t)) {
   int rv =  funchook_prepare(funchook, (void **) &write_func, pFunction);
}

void install_funchooks() {
   int rv =  funchook_install(funchook, 0);
}
